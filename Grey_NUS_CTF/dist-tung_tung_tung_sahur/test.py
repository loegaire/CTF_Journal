from Crypto.Util.number import long_to_bytes

C = 49352042282005059128581014505726171900605591297613623345867441621895112187636996726631442703018174634451487011943207283077132380966236199654225908444639768747819586037837300977718224328851698492514071424157020166404634418443047079321427635477610768472595631700807761956649004094995037741924081602353532946351
N = 140435453730354645791411355194663476189925572822633969369789174462118371271596760636019139860253031574578527741964265651042308868891445943157297334529542262978581980510561588647737777257782808189452048059686839526183098369088517967034275028064545393619471943508597642789736561111876518966375338087811587061841
k = 2**159

C_0 = (C + N) // k

# Numerical cube root
approx_m = int(round(C_0 ** (1/3)))
for m in range(approx_m - 1000, approx_m + 1001):
    if m**3 == C_0:
        flag = long_to_bytes(m)
        try:
            flag_str = flag.decode()
            if flag_str.startswith("grey{"):
                print(f"Flag: {flag_str}")
                break
        except:
            pass
else:
    print("No valid flag found")
